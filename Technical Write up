# 🚀 Agentic RAG for Marketing Ad Copy

This project implements a **LangGraph-based Agentic RAG system** designed to assist with **marketing ad copy and research**.  
The solution is built with a **FastAPI backend**, making it deployable and scalable via a web API.  

At its core, the system leverages **LangGraph** to define a **stateful, multi-step reasoning workflow** for improved retrieval and generation.

---

## 🏗️ Architecture & Tools

The architecture centers on **LangGraph**, which models the reasoning process as a cyclical graph of nodes:

- **agent** → Primary reasoning node (uses a tool-calling LLM).  
  - Decides whether to call a tool (retriever) or respond directly.  
- **retrieve** → Executes `retriever_tool` to fetch relevant docs from FAISS vector store.  
- **grade_documents** → Uses a grading LLM to evaluate the relevance of retrieved documents.  
- **generate** → Synthesizes a final answer from relevant docs and the query.  
- **rewrite** → If no relevant docs, rewrites/enhances ad copy for different tones/platforms.  

### 🔧 Tech Stack

- **LangChain components**:  
  - `WebBaseLoader`, `PyPDFLoader`, `RecursiveCharacterTextSplitter`  
  - `FAISS` (vector store)  
- **LLMs**:  
  - `ChatGroq` (Gemma2-9b-It, Llama-3.3-70b-versatile for specialized tasks)  
- **FastAPI**: Web API with endpoints for:  
  - `/chat` → Chat with the agent  
  - `/upload-pdfs` → Upload and index multiple PDFs  

---

## 🤖 Why Agentic RAG?

Unlike static RAG pipelines, this system **adds decision-making** into retrieval:  

- **Routing** → `grade_documents` ensures irrelevant context is discarded.  
- **Precision & Recall** → Uses tool-based retrieval + LLM grading for relevance.  
- **Dynamic Paths** → Can generate answers OR rewrite copy depending on query.  

This makes responses **more robust, relevant, and hallucination-resistant**.

---

## 📊 Potential Knowledge Graph Extension

Currently, knowledge is stored in **FAISS**.  
Future upgrades could integrate a **Knowledge Graph (KG)** for structured reasoning:  

- **Entities**: Marketing concepts, ad platforms, creative types, user intent.  
- **Relationships**: e.g., *Instagram → is_a_platform_for → Visual Ads*.  
- **Benefit**: Richer, more contextual responses than pure semantic search.  

---

## ✅ Evaluation Strategy

To measure effectiveness:

1. **Relevance & Hallucination Rate** (manual):  
   - Human evaluators score answers (1–5).  
   - Track hallucination-free responses %.  

2. **ROUGE Score** (automated summaries):  
   - Compare generated summaries vs. references.  

3. **F1 Score** (automated extraction):  
   - Test factual extraction queries.  

4. **Tool-Use Accuracy** (manual/automated):  
   - Ensure correct retriever vs. rewrite decisions.  

---

## 🔄 Improvement Loop

- **Memory**:  
  - Short-term via LangGraph `AgentState.messages`.  
  - Long-term via persistent storage of Q/A pairs.  

- **Feedback Loop**:  
  - User thumbs-up/down → Triggers prompt refinement.  
  - Store “failure cases” to prevent recurrence.  

---

## ⚙️ Prerequisites

- **Python** 3.8+  
- **Git**  
- Text editor (VS Code recommended)  

---

## 🛠️ Setup & Installation

Clone the repository:

```bash
git clone https://github.com/your-username/your-repo-name.git
cd your-repo-name
